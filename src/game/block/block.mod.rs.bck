use std::time::Duration;

use bevy::prelude::*;

use super::{board::{BoardRes, self}, DOWN_KEY_MULTIPLIER, GAME_SIZE, BLOCK_SIZE};

pub struct BlockPlugin;

impl Plugin for BlockPlugin {
    fn build(&self, app: &mut App) {
        app
        .insert_resource(ShouldSpawn (true))
        .add_system(block_physics);
    }
}

const BLOCK_TYPES: [[[bool; 3]; 3]; 2] = [
    [
        [false, true, false],
        [false, true, false],
        [false, true, false]
    ],
    [
        [true, true, false],
        [false, true, false],
        [false, true,  true]
    ]
];

pub struct ShouldSpawn (bool);

fn block_physics (
    mut boardres: ResMut<BoardRes>,
    mut timer: Local<Timer>,
    mut should_spawn: ResMut<ShouldSpawn>,
    time: Res<Time>,
    kb: Res<Input<KeyCode>>
) {
    let mut board = boardres.board;
    let mut should_move = true;

    let mut row_index = 0;
    for row in board.iter() {
        
        let mut value_index = 0;
        for value in row.iter() {
            if let Some(_) = value {
                if row_index == 0 {
                    // TODO! Game over
                }
            }
            if value == &Some(true) && &board[row_index+1][value_index] == &Some(false){
                should_move = false;
            }
            value_index += 1;
        }

        row_index += 1;
    }

    if !should_move {
        should_spawn.0 = true;

        // Clean up the board
        for row in board.iter_mut() {
            for value in row.iter_mut() {
                if value == &Some(true) {
                    *value = Some(false);
                }
            }
        }

        boardres.board = board;
        
        timer.reset();
        *timer = Timer::from_seconds(super::GAME_SPEED, true);

        return;
    }

    if timer.finished() {
        // Move the block
        let mut row_index = 0;
        let boardclone = board;
        for row in boardclone.iter() {
        
            let mut value_index = 0;
            for value in row.iter() {
                if value == &Some(true) {
                    board[row_index][value_index] = None;
                    board[row_index+1][value_index] = Some(true);
                }
            value_index += 1;
            }

        row_index += 1;
    }
    dbg!(board);

    } else if kb.pressed(KeyCode::Down){
        timer.tick(
            Duration::from_millis(
                ((time.delta_seconds() * DOWN_KEY_MULTIPLIER) * 1000. ) as u64)
        );

    } else {
        timer.tick(time.delta());
    }
}

struct EntitiesList {
    coordinates: Vec<Vec2>,
    entities: Vec<Entity>,
    color: Vec<Color>,
}

impl Default for EntitiesList {
    fn default() -> Self {
        Self { coordinates: Vec::new(), color: Vec::new(), entities: Vec::new() }
    }
}

// fn show_blocks(
//     mut commands: Commands,
//     mut entities_list: Local<EntitiesList>,
//     mut boardres: ResMut<BoardRes>
// ) {
//     let board = boardres.board;
//     let block = BLOCK_TYPES[0]; // TODO! Make this random

//     // No need to check for the blocks that aren't moving
//     let mut should_exist: Vec<Vec2> = Vec::new();

//     for y in 0..GAME_SIZE.1 {
//         for x in 0..GAME_SIZE.0 {
//             let value = board[y][x];

//             if value == Some(true) {
//                 should_exist.push(Vec2 { x: x as f32, y: y as f32 })
//             }
//         }
//     }

//     if entities_list.coordinates == should_exist {
//         return;
//     }

//     let differents = entities_list.coordinates.iter().zip(&should_exist).filter(|&(a, b)| a != b);

//     for coord in differents {
        
//         // Spawn block
//         let new = *coord.1 * Vec2::splat(BLOCK_SIZE);

        
//         entities_list.entities.push(
//             commands.spawn_bundle(SpriteBundle {
//                 transform: Transform {
//                     translation: Vec3::from((0f32, 0f32, 0f32)),
//                     rotation: Quat::from_rotation_z(2f32),
//                     scale: Vec3::new(100f32, 100f32, 0f32),
//                 },
//                 sprite: Sprite {
//                     color: Color::rgb(1., 1., 1.),
//                     ..Default::default()
//                 },
//                 ..Default::default()
//             })
//         .id());

//         // Remove old block from list
//         let old = *coord.0 * Vec2::splat(BLOCK_SIZE);
//         let index = entities_list.coordinates.iter().position(|&s| s == new);
//     }





// }